using System.Collections.Generic;
using UnityEngine;

public class SnakeController : MonoBehaviour
{
    [Header("Movement Settings")]
    public float moveInterval = 0.15f;

    [Header("Snake Settings")]
    public int initialLength = 2;

    private List<Vector2Int> snakeBody = new List<Vector2Int>();
    private List<GameObject> snakeSegments = new List<GameObject>();
    private Vector2Int direction = Vector2Int.right;
    private Vector2Int nextDirection = Vector2Int.right;
    private float moveTimer = 0f;
    private bool isGameOver = false;
    private bool gameStarted = false;
    private Sprite squareSprite;

    private void Start()
    {
        // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–º–µ–π–∫–∏
        squareSprite = CreateSquareSprite();
        InitializeSnake();
        
        Debug.Log("=== Snake Game Started ===");
        Debug.Log($"Press ANY ARROW KEY or WASD to start moving!");
        Debug.Log($"Input System Check: Time.frameCount = {Time.frameCount}");
    }

    private Sprite CreateSquareSprite()
    {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Å–ø—Ä–∞–π—Ç
        Texture2D texture = new Texture2D(1, 1);
        texture.SetPixel(0, 0, Color.white);
        texture.Apply();
        
        return Sprite.Create(texture, new Rect(0, 0, 1, 1), new Vector2(0.5f, 0.5f), 1f);
    }

    private void InitializeSnake()
    {
        snakeBody.Clear();
        snakeSegments.Clear();

        // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–º–µ–π–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ–ª—è
        int startX = GameManager.Instance.gridWidth / 2;
        int startY = GameManager.Instance.gridHeight / 2;

        // –°–æ–∑–¥–∞–µ–º –∑–º–µ–π–∫—É –¥–ª–∏–Ω–æ–π 2 –∫–ª–µ—Ç–∫–∏, –¥–≤–∏–∂—É—â—É—é—Å—è –≤–ø—Ä–∞–≤–æ
        for (int i = 0; i < initialLength; i++)
        {
            Vector2Int pos = new Vector2Int(startX - i, startY);
            snakeBody.Add(pos);
            CreateSnakeSegment(pos, i == 0);
        }

        direction = Vector2Int.right;
        nextDirection = Vector2Int.right;
        gameStarted = false;
        
        Debug.Log($"Snake initialized at position ({startX}, {startY}) with {snakeBody.Count} segments");
    }

    private void CreateSnakeSegment(Vector2Int gridPos, bool isHead)
    {
        Vector3 worldPos = GameManager.Instance.GetWorldPosition(gridPos.x, gridPos.y);

        // –°–æ–∑–¥–∞–µ–º GameObject –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ –∑–º–µ–π–∫–∏
        GameObject segment = new GameObject(isHead ? "SnakeHead" : "SnakeBody");
        segment.transform.position = worldPos;
        segment.transform.parent = transform;
        
        // –î–æ–±–∞–≤–ª—è–µ–º SpriteRenderer
        SpriteRenderer sr = segment.AddComponent<SpriteRenderer>();
        sr.sprite = squareSprite;
        sr.color = isHead ? GameManager.Instance.snakeHeadColor : GameManager.Instance.snakeBodyColor;
        sr.sortingOrder = 1;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞
        segment.transform.localScale = new Vector3(
            GameManager.Instance.cellSize * 0.9f,
            GameManager.Instance.cellSize * 0.9f,
            1f
        );

        snakeSegments.Add(segment);
    }

    private void Update()
    {
        if (isGameOver) return;

        HandleInput();

        moveTimer += Time.deltaTime;
        if (moveTimer >= moveInterval)
        {
            moveTimer = 0f;
            Move();
        }
    }

    private void HandleInput()
    {
        // –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ GetKeyDown (–¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–±–µ–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏)
        bool inputDetected = false;
        
        if (Input.GetKeyDown(KeyCode.UpArrow) || Input.GetKeyDown(KeyCode.W))
        {
            if (direction != Vector2Int.down)
            {
                nextDirection = Vector2Int.up;
                gameStarted = true;
                inputDetected = true;
                Debug.Log("<color=yellow>‚¨ÜÔ∏è UP detected via GetKeyDown!</color>");
            }
        }
        
        if (Input.GetKeyDown(KeyCode.DownArrow) || Input.GetKeyDown(KeyCode.S))
        {
            if (direction != Vector2Int.up)
            {
                nextDirection = Vector2Int.down;
                gameStarted = true;
                inputDetected = true;
                Debug.Log("<color=yellow>‚¨áÔ∏è DOWN detected via GetKeyDown!</color>");
            }
        }
        
        if (Input.GetKeyDown(KeyCode.LeftArrow) || Input.GetKeyDown(KeyCode.A))
        {
            if (direction != Vector2Int.right)
            {
                nextDirection = Vector2Int.left;
                gameStarted = true;
                inputDetected = true;
                Debug.Log("<color=yellow>‚¨ÖÔ∏è LEFT detected via GetKeyDown!</color>");
            }
        }
        
        if (Input.GetKeyDown(KeyCode.RightArrow) || Input.GetKeyDown(KeyCode.D))
        {
            if (direction != Vector2Int.left)
            {
                nextDirection = Vector2Int.right;
                gameStarted = true;
                inputDetected = true;
                Debug.Log("<color=yellow>‚û°Ô∏è RIGHT detected via GetKeyDown!</color>");
            }
        }
        
        // –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Input.GetAxisRaw (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
        if (!inputDetected && !gameStarted)
        {
            float horizontal = Input.GetAxisRaw("Horizontal");
            float vertical = Input.GetAxisRaw("Vertical");
            
            if (Mathf.Abs(horizontal) > 0.1f || Mathf.Abs(vertical) > 0.1f)
            {
                Debug.Log($"<color=cyan>Axis input detected: H={horizontal}, V={vertical}</color>");
                
                if (vertical > 0.1f && direction != Vector2Int.down)
                {
                    nextDirection = Vector2Int.up;
                    gameStarted = true;
                    Debug.Log("<color=yellow>‚¨ÜÔ∏è UP detected via Axis!</color>");
                }
                else if (vertical < -0.1f && direction != Vector2Int.up)
                {
                    nextDirection = Vector2Int.down;
                    gameStarted = true;
                    Debug.Log("<color=yellow>‚¨áÔ∏è DOWN detected via Axis!</color>");
                }
                else if (horizontal < -0.1f && direction != Vector2Int.right)
                {
                    nextDirection = Vector2Int.left;
                    gameStarted = true;
                    Debug.Log("<color=yellow>‚¨ÖÔ∏è LEFT detected via Axis!</color>");
                }
                else if (horizontal > 0.1f && direction != Vector2Int.left)
                {
                    nextDirection = Vector2Int.right;
                    gameStarted = true;
                    Debug.Log("<color=yellow>‚û°Ô∏è RIGHT detected via Axis!</color>");
                }
            }
        }
    }

    private void Move()
    {
        // –ù–µ –¥–≤–∏–≥–∞–µ–º—Å—è –ø–æ–∫–∞ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
        if (!gameStarted) return;
        
        direction = nextDirection;

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≥–æ–ª–æ–≤—ã
        Vector2Int newHead = snakeBody[0] + direction;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –∫—Ä–∞—è–º–∏
        if (!GameManager.Instance.IsValidPosition(newHead.x, newHead.y))
        {
            Debug.Log($"<color=red>üíÄ Game Over: Hit wall at ({newHead.x}, {newHead.y})</color>");
            GameOver();
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–ª–æ–º
        // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç (—Ö–≤–æ—Å—Ç), —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–¥–∞–ª–∏—Ç—Å—è –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
        FoodSpawner foodSpawner = FindObjectOfType<FoodSpawner>();
        bool willEatFood = foodSpawner != null && foodSpawner.IsFoodAtPosition(newHead);
        
        if (!willEatFood)
        {
            // –ï—Å–ª–∏ –Ω–µ –µ–¥–∏–º –µ–¥—É, —Ö–≤–æ—Å—Ç —É–¥–∞–ª–∏—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –±–µ–∑ —Ö–≤–æ—Å—Ç–∞
            for (int i = 0; i < snakeBody.Count - 1; i++)
            {
                if (snakeBody[i] == newHead)
                {
                    Debug.Log($"<color=red>üíÄ Game Over: Hit self at ({newHead.x}, {newHead.y})</color>");
                    GameOver();
                    return;
                }
            }
        }
        else
        {
            // –ï—Å–ª–∏ –µ–¥–∏–º –µ–¥—É, —Ö–≤–æ—Å—Ç –ù–ï —É–¥–∞–ª–∏—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—ë —Ç–µ–ª–æ
            for (int i = 0; i < snakeBody.Count; i++)
            {
                if (snakeBody[i] == newHead)
                {
                    Debug.Log($"<color=red>üíÄ Game Over: Hit self at ({newHead.x}, {newHead.y})</color>");
                    GameOver();
                    return;
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥–æ–ª–æ–≤—É
        snakeBody.Insert(0, newHead);
        CreateSnakeSegment(newHead, true);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—ä–µ–ª–∏ –ª–∏ –º—ã –µ–¥—É
        if (willEatFood)
        {
            // –°—ä–µ–ª–∏ –µ–¥—É - –Ω–µ —É–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç
            foodSpawner.OnFoodEaten();
            GameManager.Instance.AddScore(1);
            Debug.Log($"<color=green>üçé Food eaten! Score: {GameManager.Instance.GetScore()}, Length: {snakeBody.Count}</color>");
        }
        else
        {
            // –ù–µ —Å—ä–µ–ª–∏ –µ–¥—É - —É–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç
            RemoveTail();
        }

        UpdateSegmentColors();
    }

    private void RemoveTail()
    {
        if (snakeBody.Count > 0)
        {
            snakeBody.RemoveAt(snakeBody.Count - 1);
        }

        if (snakeSegments.Count > 0)
        {
            GameObject tail = snakeSegments[snakeSegments.Count - 1];
            snakeSegments.RemoveAt(snakeSegments.Count - 1);
            Destroy(tail);
        }
    }

    private void UpdateSegmentColors()
    {
        for (int i = 0; i < snakeSegments.Count; i++)
        {
            SpriteRenderer sr = snakeSegments[i].GetComponent<SpriteRenderer>();
            if (sr != null)
            {
                sr.color = i == 0 ? GameManager.Instance.snakeHeadColor : GameManager.Instance.snakeBodyColor;
                snakeSegments[i].name = i == 0 ? "SnakeHead" : $"SnakeBody_{i}";
            }
        }
    }

    private void GameOver()
    {
        isGameOver = true;
        Debug.Log("<color=red>=== üíÄ GAME OVER üíÄ ===</color>");
        GameManager.Instance.GameOver();
    }

    public List<Vector2Int> GetSnakeBody()
    {
        return snakeBody;
    }
}
